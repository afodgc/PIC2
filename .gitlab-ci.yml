stages:
  - build
  - upload
  - release

default:
  image: ghcr.io/xu-cheng/texlive-full:latest
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - build/

# ---------- CONFIGURABLE NAMING ----------
variables:

  # Final filename pieces
  FILE_PREFIX: "Report"          # CHANGE FOR THE FILE PREFIX WANTED
  FILE_SEPARATOR: "-"            # separator between prefix and version
  FILE_EXT: "pdf"

  # Final artifact name = "<PREFIX>-<TAG>.pdf"
  FINAL_NAME: "${FILE_PREFIX}${FILE_SEPARATOR}${CI_COMMIT_TAG}.${FILE_EXT}"
  ARTIFACT_NAME: "${FINAL_NAME}"

  # Package namespace in Package Registry (folder-like). Override if you want.
  PACKAGE_NAME: "${CI_PROJECT_NAME}-pdf"

  # Package Registry URL (uses PACKAGE_NAME + tag)
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${CI_COMMIT_TAG}"

  # LaTeX build
  PDF_NAME: "main.pdf"
  OUT_DIR: "build"

# ---------- BUILD ----------
build:pdf:
  stage: build
  tags: ["latex"]
  before_script:
    - latexmk -v
  script:
    # Create output dir, build, check file exists and copy to artifact name
    - mkdir -p "$OUT_DIR"
    - latexmk -pdf -outdir="$OUT_DIR" main.tex
    - test -f "$OUT_DIR/$PDF_NAME"
    - cp "$OUT_DIR/$PDF_NAME" "$ARTIFACT_NAME"
  artifacts:
    name: "pdf-$CI_COMMIT_REF_SLUG"
    when: always
    expire_in: 3 mos
    paths:
      - "$ARTIFACT_NAME"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG

# ---------- UPLOAD TO PACKAGE REGISTRY ----------
upload:
  stage: upload
  tags: ["latex"]
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - 'test -f "${ARTIFACT_NAME}"'
    - 'curl --fail --show-error --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${ARTIFACT_NAME}" "${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME}"'

# ---------- CREATE RELEASE WITH LINK ----------
release:
  stage: release
  tags: ["latex"]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - >
      release-cli create
      --name "Release ${CI_COMMIT_TAG}"
      --tag-name "${CI_COMMIT_TAG}"
      --description "Auto release for ${CI_COMMIT_TAG}"
      --assets-link "{\"name\":\"${ARTIFACT_NAME}\", \"url\":\"${PACKAGE_REGISTRY_URL}/${ARTIFACT_NAME}\"}"
